AWSTemplateFormatVersion: '2010-09-09'
Description: The API Service deployed on AWS Fargate, hosted in a public subnet and accessible via a public load balancer.
Parameters:
  Environment:
    Type: String
    Description: "The deployment environment: dev, prod"
  NetworkStackName:
    Type: String
    Description: "The name of the Network stack"
  ClusterStackName:
    Type: String
    Description: "The name of the ECS Fargate cluster stack"
  AWSServicesStackName: 
    Type: String
    Description: "The name of the AWS services stack"
  ServiceName:
    Type: String
    Description: A name for the service
  ProjectName:
    Type: String
    Description: A name for the project.
  Route53HostedZone:
    Type: String
    Description: "The DNS name of an existing Amazon Route 53 hosted zone"
    AllowedPattern: (?!-)[a-zA-Z0-9-.]{1,63}(?<!-)
    ConstraintDescription: "must be a valid DNS zone name."
  DomainName:
    Type: String
    Description: "The full domain name of the website"
    AllowedPattern: (?!-)[a-zA-Z0-9-.]{1,63}(?<!-)
    ConstraintDescription: "must be a valid DNS zone name."
  ImageURL:
    Type: String
    Description: The url of a docker image 
  ContainerPort:
    Type: Number
    Default: 4000
    Description: What port number the application inside the docker container is binding to
  ContainerCpu:
    Type: Number
    Default: 512
    Description: How much CPU to give the container. 1024 is 1 CPU
  ContainerMemory:
    Type: Number
    Default: 1024
    Description: How much memory in megabytes to give the container
  DesiredCount:
    Type: Number
    Default: 1
    Description: How many copies of the service task to run
Resources:
  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Ref 'ServiceName'
      Cpu: !Ref 'ContainerCpu'
      Memory: !Ref 'ContainerMemory'
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      ExecutionRoleArn:
        Fn::ImportValue:
          !Join [':', [!Ref 'ClusterStackName', 'ECSTaskExecutionRole']]
      TaskRoleArn: !Ref TaskRole
      ContainerDefinitions:
        - Name: !Ref 'ProjectName'
          Cpu: !Ref 'ContainerCpu'
          Memory: !Ref 'ContainerMemory'
          Image: !Ref 'ImageURL'
          PortMappings:
            - ContainerPort: !Ref 'ContainerPort'
          Environment:
            -
              Name: DOTENV_CONFIG_PATH
              Value: !Join ['.', ['/opt/app/.env', !Ref 'Environment']]
          LogConfiguration:
            LogDriver: "awslogs"
            Options:
              awslogs-group: 
                Fn::ImportValue:
                  !Join [':', [!Ref 'ClusterStackName', 'CloudwatchLogsGroup']]
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: !Ref ServiceName
  Service:
    Type: AWS::ECS::Service
    Properties:
      ServiceName: !Ref ServiceName
      Cluster:
        Fn::ImportValue:
          !Join [':', [!Ref 'ClusterStackName', 'ClusterName']]
      LaunchType: FARGATE
      TaskDefinition: !Ref 'TaskDefinition'
      SchedulingStrategy: REPLICA
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 75
      DesiredCount: !Ref 'DesiredCount'
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          SecurityGroups:
            - Fn::ImportValue:
                !Join [':', [!Ref 'ClusterStackName', 'ContainerSecurityGroup']]
          Subnets:
            - Fn::ImportValue:
                !Join [':', [!Ref 'NetworkStackName', 'PublicSubnetOne']]
            - Fn::ImportValue:
                !Join [':', [!Ref 'NetworkStackName', 'PublicSubnetTwo']]
      LoadBalancers:
        - ContainerName: !Ref 'ProjectName'
          ContainerPort: !Ref 'ContainerPort'
          TargetGroupArn: !Ref 'GreenTargetGroup'
  GreenTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 6
      HealthCheckPath: /api/v1/_health
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      TargetType: ip
      Port: !Ref 'ContainerPort'
      Protocol: HTTP
      UnhealthyThresholdCount: 2
      VpcId:
        Fn::ImportValue:
          !Join [':', [!Ref 'NetworkStackName', 'VPCId']]
  LoadBalancerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
        - TargetGroupArn: !Ref 'GreenTargetGroup'
          Type: 'forward'
      Conditions:
        - Field: path-pattern
          Values: ['*']
      ListenerArn: !Ref GreenLoadBalancerListener
      Priority: 1
  GreenLoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - TargetGroupArn: !Ref GreenTargetGroup
          Type: 'forward'
      LoadBalancerArn: 
        Fn::ImportValue:
                !Join [':', [!Ref 'ClusterStackName', 'LoadBalancer']]
      Port: 80
      Protocol: HTTP
  BlueLoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - TargetGroupArn: !Ref BlueTargetGroup
          Type: 'forward'
      LoadBalancerArn: 
        Fn::ImportValue:
                !Join [':', [!Ref 'ClusterStackName', 'LoadBalancer']]
      Port: 8080
      Protocol: HTTP
  BlueTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 6
      HealthCheckPath: /api/v1/_health
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      TargetType: ip
      Port: !Ref 'ContainerPort'
      Protocol: HTTP
      UnhealthyThresholdCount: 2
      VpcId:
        Fn::ImportValue:
          !Join [':', [!Ref 'NetworkStackName', 'VPCId']]
  TaskRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Ref 'ServiceName'
      AssumeRolePolicyDocument:
        Statement:
        - 
          Effect: Allow
          Principal:
            Service: [ecs-tasks.amazonaws.com]
          Action: ['sts:AssumeRole']
      Path: /
      Policies:
        - PolicyName: TaskRolePolice
          PolicyDocument:
            Statement:
              -
                Effect: Allow
                Action:
                  - s3:*
                Resource:
                  - Fn::ImportValue: 
                      !Join [':', [!Ref 'AWSServicesStackName', 'S3BucketARN']]
                  - Fn::Join:
                      - ""
                      - - Fn::ImportValue: !Join [':', [!Ref 'AWSServicesStackName', 'S3BucketARN']]
                        - "/*"
              -
                Effect: Allow
                Action:
                  - sqs:SendMessage
                Resource: 
                  Fn::ImportValue: 
                    !Join [':', [!Ref 'AWSServicesStackName', 'SQSQueueARN']]
              -
                Effect: Allow
                Action:
                  - dynamodb:DescribeTable
                  - dynamodb:Query
                  - dynamodb:PutItem
                  - dynamodb:GetItem
                Resource: 
                  Fn::ImportValue: 
                    !Join [':', [!Ref 'AWSServicesStackName', 'DynamoDBTableARN']]
  DNSRecord:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneName: !Join ['', [!Ref 'Route53HostedZone', .]]
      Comment: "DNS name for AWS Demo App API"
      Name: !Ref DomainName
      Type: A
      AliasTarget:
        DNSName: 
              Fn::ImportValue:
                !Join [':', [!Ref 'ClusterStackName', 'LoadBalancerDNSName']]
        EvaluateTargetHealth: false
        HostedZoneId: 
              Fn::ImportValue:
                !Join [':', [!Ref 'ClusterStackName', 'LoadBalancerCanonicalHostedZoneID']]
Outputs:
  APIDomainName:
    Description: Domain name of the api
    Value: !Ref 'DomainName'
    Export:
      Name: !Join [ ':', [ !Ref 'AWS::StackName', 'APIDomainName' ] ]